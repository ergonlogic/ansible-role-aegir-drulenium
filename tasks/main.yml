---
- name: Include git-based install of Drupal modules and libraries
  include: git.yml
  when: drulenium_module_install_method == 'git'

- name: Include Drush makefile-based install of Drupal modules and libraries
  include: make.yml
  when: drulenium_module_install_method == 'make'

- name: Check if Aegir Drulenium modules are enabled
  shell: "drush @hm pm-info --fields=status --format=list {{ item.key }} | egrep 'disabled|not installed'"
  become: True
  become_user: "{{ aegir_user }}"
  register: drulenium_modules_enabled
  with_dict: "{{ drulenium_modules }}"
  changed_when: False
  failed_when: False
  ignore_errors: yes

- fail: msg="stop here"
- name: Enable Aegir Drulenium modules
  command: "drush @hm --yes en {{ item.1.project_name }} --no-verify --strict=0"
  sudo: True
  sudo_user: "{{ aegir_user }}"
  when: "drulenium_modules_enabled.results[{{ item.0 }}].rc == 0"
  with_items: "{{ drulenium_modules_enabled.results }}"
  notify: Verify Aegir front-end

- name: Check Drulenium server setting.
  shell: drush @hm vget drulenium_vr_config_server_opt --format=string
  become: yes
  become_user: "{{ aegir_user }}"
  register: drulenium_vr_config_server_opt
  changed_when: False
  failed_when: False

- name: Set Drulenium server.
  shell: drush @hm vset drulenium_vr_config_server_opt local
  become: yes
  become_user: "{{ aegir_user }}"
  when: drulenium_vr_config_server_opt.stdout != 'local' or
        drulenium_vr_config_server_opt.stderr == 'No matching variable found.'

- name: Check Drulenium server setting.
  shell: drush @hm vget drulenium_vr_config_image_server_opt --format=string
  become: yes
  become_user: "{{ aegir_user }}"
  register: drulenium_vr_config_image_server_opt
  changed_when: False
  failed_when: False

- name: Set Drulenium image server.
  shell: drush @hm vset drulenium_vr_config_image_server_opt local
  become: yes
  become_user: "{{ aegir_user }}"
  when: drulenium_vr_config_image_server_opt.stdout != 'local' or
        drulenium_vr_config_image_server_opt.stderr == 'No matching variable found.'

- name: Check ImageMagick path.
  shell: drush @hm vget drulenium_vr_release_imagemagick_path --format=string
  become: yes
  become_user: "{{ aegir_user }}"
  register: drulenium_vr_release_imagemagick_path
  changed_when: False
  failed_when: False

- name: Set ImageMagick path.
  shell: drush @hm vset drulenium_vr_release_imagemagick_path /usr/bin
  become: yes
  become_user: "{{ aegir_user }}"
  when: drulenium_vr_release_imagemagick_path.stdout != '/usr/bin' or
        drulenium_vr_release_imagemagick_path.stderr == 'No matching variable found.'

